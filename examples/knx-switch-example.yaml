esphome:
  name: knx-switch-test
  platform: ESP32
  board: esp32dev

# Enable logging
logger:
  level: DEBUG
  logs:
    knx_tp: DEBUG

# UART for NCN5120 transceiver
uart:
  id: knx_uart
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 19200

# KNX TP Component
knx_tp:
  uart_id: knx_uart
  physical_address: "1.1.10"

  # Define group addresses
  group_addresses:
    # Lights
    - id: light_living_room
      address: "0/1/1"
    - id: light_kitchen
      address: "0/1/2"
    - id: light_bedroom
      address: "0/1/3"

    # Outlets
    - id: outlet_1
      address: "0/2/1"
    - id: outlet_2
      address: "0/2/2"

    # Heating
    - id: heating_pump
      address: "0/3/1"

    # Scene control
    - id: scene_all_off
      address: "0/4/1"

# ============================================================================
# SWITCH EXAMPLES
# ============================================================================

switch:
  # Example 1: Basic switch - Control living room light
  - platform: knx_tp
    name: "Living Room Light"
    id: living_room_light
    command_ga_id: light_living_room
    state_ga_id: light_living_room  # Same GA for feedback

  # Example 2: Switch without state feedback
  - platform: knx_tp
    name: "Kitchen Light"
    id: kitchen_light
    command_ga_id: light_kitchen
    # No state_ga_id = switch won't receive status updates

  # Example 3: Switch with separate command and state GA
  - platform: knx_tp
    name: "Bedroom Light"
    id: bedroom_light
    command_ga_id: light_bedroom      # Send commands here (0/1/3)
    state_ga_id: light_bedroom        # Receive status here (same in this example)

  # Example 4: Control outlet/socket
  - platform: knx_tp
    name: "Outlet 1"
    id: outlet_1_switch
    command_ga_id: outlet_1
    state_ga_id: outlet_1
    icon: "mdi:power-socket-eu"

  # Example 5: Control heating pump
  - platform: knx_tp
    name: "Heating Circulation Pump"
    id: heating_pump_switch
    command_ga_id: heating_pump
    state_ga_id: heating_pump
    icon: "mdi:pump"
    device_class: switch

  # Example 6: Scene trigger (sends ON, no state feedback needed)
  - platform: knx_tp
    name: "All Lights OFF"
    id: scene_all_off_trigger
    command_ga_id: scene_all_off
    icon: "mdi:lightbulb-off-outline"
    # Typically scenes don't have state feedback

  # Example 7: Template switch with custom logic
  - platform: template
    name: "Living Room Light (Template)"
    id: living_room_light_template
    icon: "mdi:ceiling-light"
    optimistic: false  # Use KNX state feedback
    turn_on_action:
      - logger.log: "Turning ON living room light via KNX"
      - switch.turn_on: living_room_light
    turn_off_action:
      - logger.log: "Turning OFF living room light via KNX"
      - switch.turn_off: living_room_light
    lambda: |-
      // Return current state from KNX switch
      return id(living_room_light).state;

# ============================================================================
# AUTOMATION EXAMPLES
# ============================================================================

# Example: Toggle light on button press
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button"
    on_press:
      - switch.toggle: living_room_light
      - logger.log: "Button pressed - toggled living room light"

# Example: Turn off all lights at specific time
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      # Turn off all lights at 23:00
      - hours: 23
        minutes: 0
        seconds: 0
        then:
          - logger.log: "Bedtime - turning off all lights"
          - switch.turn_off: living_room_light
          - switch.turn_off: kitchen_light
          - switch.turn_off: bedroom_light

# Example: React to KNX telegram with custom action
knx_tp:
  on_telegram:
    then:
      - lambda: |-
          using namespace esphome::knx_tp::dpt_helpers;

          // Log all KNX telegrams
          ESP_LOGD("knx", "Received telegram from GA: %s", ga.c_str());

          // Check if it's a specific group address
          if (ga == "0/1/1") {  // Living room light
            bool state = decode_dpt1(data);
            ESP_LOGI("automation", "Living room light is now: %s", state ? "ON" : "OFF");

            // Custom logic: if living room light turns on, turn on kitchen too
            if (state) {
              ESP_LOGI("automation", "Living room ON -> also turning on kitchen");
              id(kitchen_light).turn_on();
            }
          }

# ============================================================================
# DIRECT GROUP ADDRESS CONTROL (Advanced)
# ============================================================================

# You can also send group writes directly without defining a switch:
button:
  # Send ON to group address
  - platform: template
    name: "KNX Send ON to 0/1/1"
    on_press:
      - lambda: |-
          auto knx = id(knx_tp_id);
          if (knx) {
            std::vector<uint8_t> data = {0x01};  // DPT 1 = ON
            knx->send_group_write("0/1/1", data);
            ESP_LOGI("knx", "Sent ON to 0/1/1");
          }

  # Send OFF to group address
  - platform: template
    name: "KNX Send OFF to 0/1/1"
    on_press:
      - lambda: |-
          auto knx = id(knx_tp_id);
          if (knx) {
            std::vector<uint8_t> data = {0x00};  // DPT 1 = OFF
            knx->send_group_write("0/1/1", data);
            ESP_LOGI("knx", "Sent OFF to 0/1/1");
          }

  # Send group read request
  - platform: template
    name: "KNX Read 0/1/1 Status"
    on_press:
      - lambda: |-
          auto knx = id(knx_tp_id);
          if (knx) {
            knx->send_group_read("0/1/1");
            ESP_LOGI("knx", "Sent read request to 0/1/1");
          }

# ============================================================================
# NOTES AND BEST PRACTICES
# ============================================================================

# 1. GROUP ADDRESS NAMING:
#    - Use descriptive IDs: light_living_room, outlet_kitchen, etc.
#    - Keep KNX address format: "main/middle/sub" or "main.middle.sub"
#
# 2. STATE FEEDBACK:
#    - Always specify state_ga_id if the device sends status updates
#    - Use same GA if device echoes commands back
#    - Omit state_ga_id for one-way controls (scenes, triggers)
#
# 3. SWITCH vs DIRECT GROUP WRITE:
#    - Use switch component for simple ON/OFF controls
#    - Use direct group writes for custom DPT types or complex logic
#
# 4. ICON SELECTION:
#    - mdi:lightbulb - lights
#    - mdi:power-socket-eu - outlets
#    - mdi:pump - pumps
#    - mdi:radiator - heating
#    - mdi:fan - ventilation
#
# 5. TESTING:
#    - Test with ETS monitor to see actual telegrams
#    - Check logs for "Sent group write to..." messages
#    - Verify physical address doesn't conflict with other devices
